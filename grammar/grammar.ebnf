/* _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-.
 *     Created by Kevin Traini
 *
 *     Fil compiler
 *
 *     GNU General Public License v3.0
 * _.-._.-._.-._.-._.-._.-._.-._.-._.-._.-.
 */

// Grammar of the language
// The entry point is 'program'

program ::= package { import } { expr };

package ::= 'package' (identifier { '.' identifier });

import ::= 'import' [ identifier [ 'as' identifier ] 'from' ] file_identifier;

expr ::= decl_class
       | decl_interface
       | decl_var
       | decl_function
       | lambda
       | assign
       | control
       | loop
       | calcul
       | function_call
       | method_call
       | return
       | new
       | 'this' | 'null' | 'super'
       | '(' expr ')'
       | expr ';' expr
       | value;
list_expr ::= expr { ',' expr };

decl_interface ::= [ 'export' ] 'interface' identifier '(' [ list_field ] ')' [ ':' list_identifier ] [ '{' interface_body '}' ];
interface_body ::= { decl_var | decl_method };

decl_class ::= [ 'export' ] [ 'open' | 'abstract' ] 'class' identifier [ '(' [ field | param { ',' (field | param) } ] ')' ] [ ':' list_identifier ] [ '{' class_body '}' ];
class_body ::= { decl_var | decl_method | constructor };
constructor ::= 'constructor' '{' { expr } '}';

decl_var ::= [ 'export' ] visibility ('val' | 'var') identifier [ ':' type ] [ '=' expr ] { ',' identifier [ ':' type ] [ '=' expr ]};

decl_method ::= visibility [ 'abstract' ] 'fun' identifier '(' [ list_param ] ')' [ ':' type ] [ function_body ];
decl_function ::= [ 'export' ] 'fun' identifier '(' [ list_param ] ')' [ ':' type ] function_body;
function_body ::= ('=' expr)
                | ('(' expr ')')
                | ('{' { expr } '}');

lambda ::= '(' [ list_identifier ] ')' '->' function_body;
lambda_type ::= '(' [ type_list ] ')' '->' type;

assign ::= expr assign_operator expr;
assign_operator ::= [ binary_operator ] '=';

control ::= if | switch | exception;
if ::= 'if' '(' expr ')' control_body { 'elif' '(' expr ')' control_body } [ 'else' control_body ];
control_body ::= expr
          | ('{' { expr } '}');
switch ::= 'switch' '(' expr ')' '{' switch_body '}';
switch_body ::= { (('case' expr) | 'default') '->' control_body };
exception ::= 'try' '{' { expr } '}' { 'catch' '(' identifier identifier ')' '{' { expr } '}' };

loop ::= for | while;
for ::= 'for' for_condition control_body;
for_condition ::= (identifier 'in' expr)
                | ([ expr ] ';' [ expr ] ';' [ expr ]);
while ::= 'while' '(' expr ')' control_body;

calcul ::= unary_calcul | binary_calcul;
unary_calcul ::= (unary_operator expr)
               | (expr unary_operator);
binary_calcul ::= expr binary_operator expr;
unary_operator ::= '-' | '!' | '*' | '&' | '++' | '--' | '[' expr ']';
binary_operator ::= '+' | '-' | '*' | '/' | '%' | '<<' | '>>' | '&&' | '||' | '==' | '!=' | '<=' | '>=' | '<' | '>' | '&' | '|' | '^';

function_call ::= identifier '(' [ list_expr ] ')';
method_call ::= expr '.' function_call;

return ::= 'return' expr;

new ::= 'new' identifier (('(' [ list_expr ] ')') | ('[' expr ']'));

visibility ::= 'public' | 'protected' | 'internal' | 'private';
list_field ::= field { ',' field };
field ::= visibility ('val' | 'var') identifier ':' [ '*' | '&' ] type [ '=' expr ];
list_param ::= param { ',' param };
param ::= identifier ':' [ '*' | '&' ] type [ '=' expr ];

identifier ::= letter { char };
list_identifier ::= identifier { ',' identifier };
file_identifier ::= (identifier { '.' identifier })
                  | string;

type ::= (identifier | lambda_type | generic_type) { '*' | '[]' };
generic_type ::= 'int' | 'float' | 'double' | 'boolean' | 'char';
type_list ::= type { ',' type };

value ::= int | float | boolean | char_value | string | multiline_string;
int ::= digit { digit };
float ::= (int '.' { digit }) | ('.' int);
boolean ::= 'true' | 'false';
char_value ::= '\'' char '\'';

letter ::= 'a'-'z' | 'A'-'Z';
digit ::= '0'-'9';
char ::= letter | digit | '_' | '-';

string ::= '"' { '[~"]' } '"';
multiline_string ::= '"""' { '[~"]' } '"""';